数组指针和指针数组

前几天我看c的代码看到一些不大懂的写法

其中有一个是这样的
typedefine int（aaa）［5］
这是定义了一个数组的别名
int bbb［］；
aaa* myaaa= &bbb；
这样是ok的。因为声明了就有地址了。

还有一个是这样的
int （*p）［5］
这个是数组指针

指针数组的类型是 int （*）［5］这种
具体写法是int *p［5］
究其原因，是因为［］的优先度比*要高
编译器会首先认为这个是一个数组。里面放的每个元素是int*类型的指针

关于用加号连接字符串

  OnlineGDB beta
online compiler and debugger for c/c++
code. compile. run. debug. share.
IDE
My Projects
Learn Programming
Programming Questions
Sign Up
Login

Limited time offer: Get 10 free Adobe Stock images.
ADS VIA CARBON
About • FAQ • Blog • Terms of Use • Contact Us • GDB Tutorial • Credits
© 2016 - 2019 GDB Online
       Language    
main.c
  
    
input
stderr
Compilation failed due to following error(s). main.c: In function ‘main’:
main.c:13:26: error: invalid operands to binary + (have ‘char *’ and ‘char *’)
     printf("Hello World" + "aa");
     
这个错误就可以看出来，运算变成了char*的相加。指针的加法运算只能用数字，所以会出现这个错误。

    person2 kato, *p2; 这个声明了什么？
    声明了一个结构体，一个结构体指针。

c语言当中的宏

#if
#ifdef 识别子
#ifndef 识别子
#else
#elseif
#endif

语句中也可以出现：
define（）

#define F(...) f(0 __VA_OPT__(,) __VA_ARGS__)
#define G(X, ...) f(0, X __VA_OPT__(,) __VA_ARGS__)
#define SDEF(sname, ...) S sname __VA_OPT__(= { __VA_ARGS__ })
F(a, b, c) // replaced by f(0, a, b, c)
F()        // replaced by f(0)
G(a, b, c) // replaced by f(0, a, b, c)
G(a, )     // replaced by f(0, a)
G(a)       // replaced by f(0, a)
SDEF(foo);       // replaced by S foo;
SDEF(bar, 1, 2); // replaced by S bar = { 1, 2 };
