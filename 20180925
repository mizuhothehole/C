cpp learning of this morning

1.cpp has the constructor like:

class A {

private:
int a;

protected:
  int getA(){
    return this->a;
  }

public:
  A(){
    this->a=222;
  }
  
  virtual void ToBeOverridedMethod();
  
  ~A(){
    cout << "the class is now over!" << endl;
  }

}

in this class defination, the "this" syntax means the pointer of this class itself. The point is that, it is a "pointer".

2. cpp also has the destructor, but like above.

3. to announce a class that could be overrided, we MUST announce a method like virtual MethodName.
Like in the sample the "virtual void ToBeOverridedMethod()".

4. To extend a class, in cpp we use ":". Something like A:public B. I saw a lot of samples and they always use the "public"
brfore the class extended.

5. Even the basic data types, if we use the "&", we also could change the value of it even in method, because it is passing the "real value".

samples:
/******************************************************************************

                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <iostream>

using namespace std;

int main()
{
    class A {
        public:
            virtual void MethodForOverride(){
                cout << "virtual method original!" << endl;
            }
        A(){
            
        }
    };
    
    class B: public A {
        public:
             virtual void MethodForOverride(){
                 cout << "virtual method overrided!" << endl;
             }
             B(){
                 
             }
    };
    
    cout<<"Hello World";
    A *a = new A();
    B b;
    a->MethodForOverride();
    b.MethodForOverride();
    delete a;
    return 0;
}

output:

Hello Worldvirtual method original!                                                                                 

virtual method overrided!                                                                                                                                                                                                                                                                                                                                

...Program finished with exit code 0                                                                                

Press ENTER to exit console.  

sample 2:

/******************************************************************************

                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <iostream>

using namespace std;

int main()
{
    class A {
        public:
            virtual void MethodForOverride(){
                cout << "virtual method original!" << endl;
            }
        A(){
            
        }
    };
    
    class B: public A {
        public:
             virtual void MethodForOverride(){
                 cout << "virtual method overrided!" << endl;
             }
             B(){
                 
             }
    };
    
    cout<<"Hello World";
    A *a = new B();
    B b;
    a->MethodForOverride();
    b.MethodForOverride();
    delete a;
    return 0;
}

Hello Worldvirtual method overrided!                                                                                

virtual method overrided!                                                                                           

                                                                                                                    

                                                                                                                    

...Program finished with exit code 0                                                                                

Press ENTER to exit console.  

#include <iostream>
#include <stack>
using namespace std;

bool isEmpty(std::stack<int>*  s) {
       if(s->empty()){
        cout << "the stack is empty" << endl;
        return true;
    } else {
        cout << "the stack is not empty" << endl;
        return false;
    } 
}

int main()
{
    
    stack<int> s;
    isEmpty(&s);
    s.push(0);
    cout<<"Hello World" << s.top() << endl;
    isEmpty(&s);

    return 0;
}

------------------------------------------------------------
output log:

the stack is empty                                                                                                                    
Hello World0                                                                                                                          
the stack is not empty
